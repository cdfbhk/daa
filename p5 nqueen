
def n_queens(n):
    def is_safe(row, col):
        return col not in columns and (row + col) not in pos_diagonals and (row - col) not in neg_diagonals

    def place_queen(row, col):
        board[row][col] = "1"
        columns.add(col)
        pos_diagonals.add(row + col)
        neg_diagonals.add(row - col)

    def remove_queen(row, col):
        board[row][col] = "0"
        columns.remove(col)
        pos_diagonals.remove(row + col)
        neg_diagonals.remove(row - col)

    def backtrack(row):
        if row == n:
            res.append([" ".join(row) for row in board])
            return

        for col in range(n):
            if is_safe(row, col):
                place_queen(row, col)
                backtrack(row + 1)
                remove_queen(row, col)

    columns = set()
    pos_diagonals = set()
    neg_diagonals = set()
    res = []
    board = [["0"] * n for _ in range(n)]

    backtrack(0)

    for solution in res:
        for row in solution:
            print(row)
        print()

if __name__ == "__main__":
    # Take the size of the chessboard dynamically from the user
    chessboard_size = int(input("Enter the size of the chessboard (N x N): "))
    n_queens(chessboard_size)

  
